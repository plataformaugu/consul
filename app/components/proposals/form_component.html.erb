<%= translatable_form_for(proposal, url: url, html: { class: "proposal-form" }) do |f| %>
  <%= render "shared/errors", resource: proposal %>
  <% @type_name = @is_initiative ? 'iniciativa' : 'propuesta' %>

  <fieldset class="required-fields">
    <% if current_page?(new_proposal_path) %>
    <h2 class="mb-2">Hola <span style="color: #61b5d7;"><%= current_user.first_name? ? current_user.first_name : current_user.username %></span>, sube aquí tu <%= @type_name %>.</h2>
    <% end %>

    <%= render "shared/globalize_locales", resource: proposal %>
    <%= f.hidden_field :is_initiative, value: @is_initiative %>
    <%= f.hidden_field :proposals_theme_id, value: @proposals_theme ? @proposals_theme.id : nil %>

    <%= f.translatable_fields do |translations_form| %>
      <div>
        <%= translations_form.text_field :title,
              maxlength: Proposal.title_max_length,
              data: suggest_data(proposal),
              class: 'custom-input',
              label: "Título de la #{@type_name}",
              placeholder: 'Frase corta que resume tu proyecto',
              required: true %>
      </div>
      <div class="js-suggest" data-locale="<%= translations_form.locale %>"></div>

      <div>
        <%= translations_form.text_area :summary,
                                        rows: 4, maxlength: 200,
                                        hint: t("proposals.form.proposal_summary_note"),
                                        label: "Resumen de la #{@type_name}",
                                        class: 'custom-textarea',
                                        placeholder: 'Describe tu idea',
                                        required: true %>
      </div>

      <div>
        <%= translations_form.text_area :description,
                                        maxlength: Proposal.description_max_length,
                                        label: "Texto desarrollado de la #{@type_name}",
                                        class: "html-area",
                                        required: true %>
      </div>
    <% end %>
  </fieldset>

  <%= f.invisible_captcha :subtitle %>

  <fieldset>
  
    <% if @is_initiative %>
      <div>
        <%=
          f.date_field :limit_date,
          required: @is_initiative,
          label: 'Fecha límite',
          class: 'custom-input'
        %>
      </div>
    <% end %>

    <div>
      <%= f.text_field :video_url, hint: t("proposals.form.proposal_video_url_note"), class: 'custom-input' %>
    </div>

    <% if feature?(:allow_images) %>
      <div class="images">
        <%= render "images/nested_image", f: f %>
      </div>
    <% end %>

    <% if feature?(:allow_attached_documents) %>
      <div class="documents">
        <%= render "documents/nested_documents", f: f %>
      </div>
    <% end %>

    <div class="mt-2">
      <%=
        f.collection_select :main_theme_id,
        MainTheme.all,
        :id,
        :name,
        {prompt: 'Elige un eje temático', label: 'Eje Temático'},
        {class: 'custom-input', style: 'width: 100%;', required: true}
      %>
    </div>

    <% if @is_initiative %>
      <div class="row">
        <%= render Segmentation::FormComponent.new(
          Segmentation.find_by(entity_name: proposal.class.name, entity_id: proposal.id)
        ) %>
      </div>
    <% end %>
  </fieldset>

  <div class="actions" style="border: none;">
    <% if proposal.new_record? %>
      <div style="display: none;">
        <%= f.check_box :terms_of_service,
          title: t("form.accept_terms_title"),
          label: t("form.accept_terms",
                   policy: link_to(t("form.policy"), "/privacy", target: "blank"),
                   conditions: link_to(t("form.conditions"), "/condiciones", target: "blank")
                  ),
          checked: true
         %>
      </div>
    <% end %>

    <%= f.submit(class: "#{@is_initiative ? 'create-iniciativa' : 'create-button'}", value: 'Enviar') %>
  </div>
<% end %>

<script>
// MAP
var map = new L.Map('leaflet')

$.getJSON('/UV_KML.geojson', function(lasCondesSectors) {
  const osm = new L.TileLayer.BoundaryCanvas("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    boundary: lasCondesSectors,
  });
  map.addLayer(osm)

  // Variables for map
  var selectedFeatures = []
  var defaultStyle = {
      color: 'gray',
      fillOpacity: 0,
      weight: 2,
  }
  <% if @proposals_theme and @proposals_theme.sectors.any? %>
  var availableSectors = <%= raw(@proposals_theme.sectors.pluck(:name)) %>
  <% end %>

  // Actions
  function colorlayer(feature, layer) {

    <% if @proposals_theme and @proposals_theme.sectors.any? %>
    if (availableSectors.includes(feature.properties.name.replace('-', ''))) {
      map.removeLayer(layer)
    } else {
      layer.setStyle(defaultStyle)
    }
    <% else %>
    layer.setStyle(defaultStyle)
    <% end %>

    layer.on('click', function(e) {
      var name = feature.properties.name.replaceAll('-', '')

      if (selectedFeatures.includes(name)) {
        <% if @proposals_theme and @proposals_theme.sectors.any? %>
        layer.setStyle({
          color: "#3388ff",
          opacity: 1,
          fillOpacity: 0.2
        })
        <% else %>
        layer.setStyle(defaultStyle)
        <% end %>
        selectedFeatures = selectedFeatures.filter(sf => sf !== name)
      } else {
        <% if @proposals_theme and @proposals_theme.sectors.any? %>
          if (availableSectors.includes(name)) {
            selectedFeatures.push(name)
            layer.setStyle({
              color: "#00a000",
              opacity: 1,
              fillOpacity: 0.5
            })
          }
        <% else %>
        selectedFeatures.push(name)
        layer.setStyle({
          color: "#00008c",
          opacity: 0.6,
          fillOpacity: 0.5
        })
        <% end %>
      }

      Array.from(Array(25).keys()).forEach(function(n) {
        $('#proposal_sector_ids_c' + (n + 1)).prop('checked', false)
      })

      selectedFeatures.forEach(function(sf) {
        $('#proposal_sector_ids_' + sf.toLowerCase()).prop('checked', true)
      })
      <% if @proposals_theme and @proposals_theme.sectors.any? %>
        $('#selected-sectors').text(selectedFeatures.length ? selectedFeatures.join(', ') : 'Ninguno')
      <% else %>
        $('#selected-sectors').text(selectedFeatures.length ? selectedFeatures.join(', ') : 'Todos')
      <% end %>
    })
  }

  // Bounds
  var gjLayer = L.geoJSON(lasCondesSectors);
  map.fitBounds(gjLayer.getBounds());

  // Load features
  L.geoJSON(lasCondesSectors, {
      onEachFeature: colorlayer
  }).addTo(map)

  // Map config
  map.dragging.disable()
  map.touchZoom.disable();
  map.doubleClickZoom.disable();
  map.scrollWheelZoom.disable();
  map.boxZoom.disable();
  map.keyboard.disable();
})
</script>


<script>
$(document).ready(function() {
  $('input:checkbox[name="proposal[neighbor_types][]"]').on('click', function() {
    var checkedCheckboxes = $('input:checkbox[name="proposal[neighbor_types][]"]:checked')
    
    if (checkedCheckboxes.length > 0) {
      $('input:checkbox[name="proposal[neighbor_types][]"]').each(function(_, value) {
        $(value).prop('required', false)
      })
    } else {
      $('input:checkbox[name="proposal[neighbor_types][]"]').each(function(_, value) {
        $(value).prop('required', true)
      })
    }
  })
})
</script>
