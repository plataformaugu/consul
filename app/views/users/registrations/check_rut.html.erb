<% provide :title do %><%= t("devise_views.users.registrations.new.title") %><% end %>
<h2><%= t("devise_views.users.registrations.new.title") %></h2>

<%= render "devise/omniauth_form", action: "sign_up" %>

<%= form_with(url: '/users', method: 'post') do |f| %>
  <div class="row">
    <div class="small-12 column">
        <%=
            f.text_field :document_number,
            autofocus: true,
            label: false,
            maxlength: 10,
            hint: 'Ingresa tu RUT con el siguiente formato: 12345678-9',
            pattern: '^(\d{7,8}-[\dkK])$',
            class: 'custom-input',
            required: true,
            placeholder: 'RUT'
        %>
        <%= f.hidden_field :type, value: 'pre' %>
        <%= f.invisible_captcha :address %>

      <div class="small-12 text-center">
        <%= f.submit 'Continuar', class: "solid-button rounded-xl" %>
      </div>
    </div>
  </div>
<% end %>

<%= render "devise/shared/links" %>

<script>
/**
 * @param {(string|number)} rut
 * @returns {boolean}
 */
function validateRUT(rut) {
  if (typeof rut !== 'string' && typeof rut !== 'number') {
    throw new TypeError('Input parameter must be of type string or integer')
  }

  const cleanRUT = typeof rut === 'string' ? clearRUT(rut) : String(rut)
  const checkDigit = [...cleanRUT].slice(-1)[0]
  const withoutCheckDigitRUT = cleanRUT.slice(0, -1)
  const obtainedCheckDigit = getCheckDigit(withoutCheckDigitRUT)

  return checkDigit.toLowerCase() === obtainedCheckDigit.toLowerCase()
}

/**
 * @param {(string|number)} rut 
 * @returns {string}
 */
 function getCheckDigit(rut) {
  const cleanRUT = clearRUT(rut)
  const reversedRUT = [...String(cleanRUT)].map(v => parseInt(v)).reverse()
  let result = 0

  for (let i = 0, j = 2; i < reversedRUT.length; i++, j < 7 ? j++ : j = 2) {
    result += reversedRUT[i] * j;
  }

  return (11 - (result % 11)) <= 9 ? String((11 - (result % 11))) : 'K'
}

/**
 * @param {string} rut 
 * @returns {string}
 */
function clearRUT(rut) {
  return String(rut).replace(/[^0-9a-z]/gi, '');
}

/**
 * @param {number} amount 
 * @param {boolean} dots
 * @param {boolean} hyphen
 * @returns {Array<string>}
 */
function generateRandomRUT(amount = 1, dots = false, hyphen = false) {
  const generatedRUTs = [...Array(amount).keys()].map(() => {
    const rut = Math.floor(1000000 + Math.random() * 30000000)
    return `${dots ? rut.toLocaleString() : rut}${hyphen ? '-' : ''}${getCheckDigit(rut)}`
  })

  return amount === 1 ? generatedRUTs[0] : generatedRUTs
}

$('#document_number').keyup(function() {
  let rutElement = document.getElementById('document_number');
  if (!validateRUT(rutElement.value)) {
    rutElement.setCustomValidity('El RUT no es v√°lido.')
  } else {
    rutElement.setCustomValidity('')
  }
})
</script>
